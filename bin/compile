#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# fail fast
set -e

get_property()
{
  local file=${1?"No file specified"}
  local key=${2?"No key specified"}

  # escape for regex
  local escaped_key=$(echo $key | sed "s/\./\\\./g")

  [ -f $file ] && \
  grep -E ^$escaped_key[[:space:]=]+ $file | \
  sed -E -e "s/$escaped_key([\ \t]*=[\ \t]*|[\ \t]+)\"?([A-Za-z0-9\.-]*)\"?.*/\2/g"
}

check_build_status()
{
  if [ "${PIPESTATUS[*]}" != "0 0" ]; then
    echo " !     Failed to build app"
    exit 1
  fi
}

BP_DIR=$(cd $(dirname $0)/..; pwd) # absolute path
. $BP_DIR/lib/common.sh

# parse args
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

export_env_dir $ENV_DIR

JVM_COMMON_BUILDPACK=${JVM_COMMON_BUILDPACK:-https://codon-buildpacks.s3.amazonaws.com/buildpacks/heroku/jvm-common.tgz}
mkdir -p /tmp/jvm-common
curl --silent --location $JVM_COMMON_BUILDPACK | tar xzm -C /tmp/jvm-common --strip-components=1
. /tmp/jvm-common/bin/util
. /tmp/jvm-common/bin/java

# install JDK
javaVersion=$(detect_java_version ${BUILD_DIR})
status_pending "Installing OpenJDK ${javaVersion}"
install_java ${BUILD_DIR} ${javaVersion}
jdk_overlay ${BUILD_DIR}
status_done

if [ -f $BUILD_DIR/grailsw ] ; then
    chmod +x $BUILD_DIR/grailsw
    GRAILS_CMD="./grailsw"
else
  # install grails
  if [ ! -d $GRAILS_DIR ]; then
    install_grails $GRAILS_VERSION
  else
    echo "Grailsw not found"
    exit 1
  fi
fi

#create the cache dir if it doesn't exist
mkdir -p $CACHE_DIR
mkdir -p $CACHE_DIR/.grails
mkdir -p $CACHE_DIR/.ivy

echo "CREATE .grails in $CACHE_DIR/.grails"
ls -lha $CACHE_DIR/.grails

ln -sf $CACHE_DIR/.grails $HOME/.grails

if [ $GRAILS_ENV ]; then
	BUILDCMD_OPT="$BUILDCMD_OPT -Dgrails.env=$GRAILS_ENV"
fi

# change to build dir to run maven
cd $BUILD_DIR

BUILDCMD="$GRAILS_CMD $BUILDCMD_OPT -Divy.default.ivy.user.dir=$CACHE_DIR/.ivy war --non-interactive"

echo "-----> Executing $BUILDCMD"
eval "$BUILDCMD" | sed -u 's/^/       /'
check_build_status

if [ ! -d server ] ; then

    mkdir server

    if [ "jetty" == "$(get_property ${BUILD_DIR}/system.properties grails.application.container)" ] ; then
      SERVLET_VERSION=$(get_property $BUILD_DIR/grails-app/conf/BuildConfig.groovy 'grails.servlet.version')

      if [ "$SERVLET_VERSION" == '3.0' ]; then
        JETTY_RUNNER_VERSION=8.1.10.v20130312
      else
        JETTY_RUNNER_VERSION=7.5.4.v20111024
      fi

      echo "vendored:${JETTY_RUNNER_VERSION}" > ${CACHE_DIR}/jettyVersion
    fi

    if [ -f $CACHE_DIR/jettyVersion ] ; then
	      JETTY_RUNNER_VERSION=$(cat $CACHE_DIR/jettyVersion | sed "s/vendored://g")
        echo "-----> No server directory found. Adding jetty-runner $JETTY_RUNNER_VERSION automatically."
        DEFAULT_RUNNER_JAR=server/jetty-runner.jar
        curl -fs http://s3pository.heroku.com/maven-central/org/mortbay/jetty/jetty-runner/$JETTY_RUNNER_VERSION/jetty-runner-$JETTY_RUNNER_VERSION.jar > $DEFAULT_RUNNER_JAR
        echo "vendored:$JETTY_RUNNER_VERSION" > server/jettyVersion
    else
        WEBAPP_RUNNER_VERSION=7.0.57.2
	echo "-----> No server directory found. Adding webapp-runner $WEBAPP_RUNNER_VERSION automatically."
        DEFAULT_RUNNER_JAR=server/webapp-runner.jar
        curl -fs http://s3pository.heroku.com/maven-central/com/github/jsimone/webapp-runner/$WEBAPP_RUNNER_VERSION/webapp-runner-$WEBAPP_RUNNER_VERSION.jar > $DEFAULT_RUNNER_JAR
	echo "vendored:$WEBAPP_RUNNER_VERSION" > server/webappRunnerVersion
	echo "vendored:$WEBAPP_RUNNER_VERSION" > $CACHE_DIR/webappRunnerVersion
    fi

    echo $DEFAULT_RUNNER_JAR > server/defaultRunnerJar
fi